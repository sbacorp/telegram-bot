/* eslint-disable import/no-cycle */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable unicorn/prevent-abbreviations */
/* eslint-disable no-loop-func */
/* eslint-disable no-await-in-loop */
/* eslint-disable no-param-reassign */
import { InlineKeyboard, Keyboard } from "grammy";
import { type Conversation } from "@grammyjs/conversations";
import { Context } from "#root/bot/context.js";
import {
  editUserAttribute,
  fetchUser,
  findPromoCodeByTitleAndProduct,
  updateUserPhone,
} from "#root/server/utils.js";
import { PaymentModel } from "#root/server/models.js";
import { createPaymentLink } from "#root/server/creat-pay-link.js";
import { cancel } from "../../keyboards/cancel.keyboard.js";

export async function BuyIndividualConversation(
  conversation: Conversation<Context>,
  ctx: Context
) {
  const user = await conversation.external(() =>
    fetchUser(ctx.chat!.id.toString())
  );

  const product = {
    id: 6,
    name: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ",
    price: 50_000,
  };

  if (!conversation.session.fio) {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û", {
      reply_markup: new Keyboard().text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é").resized(),
    });
    ctx = await conversation.waitFor("message:text");
    while (!ctx.message?.text?.match(/^(?:[–Å–ê-–Ø][–∞-—è—ë]+ ){2}[–Å–ê-–Ø][–∞-—è—ë]+$/)) {
      if (ctx.message?.text === "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
        return "home";
      }
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û");
      ctx = await conversation.waitFor("message:text");
    }
    conversation.session.fio = ctx.message?.text;
    await conversation.external(async () =>
      editUserAttribute(ctx.chat!.id.toString(), "fio", ctx.message!.text!)
    );
  }

  await ctx.reply("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚¨áÔ∏è", {
    reply_markup: new Keyboard()
      .requestContact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
      .resized()
      .oneTime(),
  });
  ctx = await conversation.waitFor(":contact");
  await conversation.external(async () =>
    updateUserPhone(ctx.chat!.id, ctx.message!.contact!.phone_number)
  );
  conversation.session.phoneNumber = ctx.message!.contact!.phone_number;
  await conversation.external(async () =>
    editUserAttribute(
      ctx.chat!.id.toString(),
      "phoneNumber",
      ctx.message!.text!
    )
  );

  await ctx.reply(
    `–ú–µ—Å—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 15 –º–∏–Ω—É—Ç. –í —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç, –∏–Ω–∞—á–µ –±—Ä–æ–Ω—å –±—É–¥–µ—Ç —Å–Ω—è—Ç–∞.`
  );
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", {
    reply_markup: new InlineKeyboard()
      .text("–ö–∞—Ä—Ç–æ–π", "card")
      .text("–°–ë–ü/MirPay", "sbp"),
  });
  const paymentMethod = await conversation.waitForCallbackQuery(
    ["card", "sbp"],
    {
      otherwise: () =>
        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", {
          reply_markup: new InlineKeyboard()
            .text("–ö–∞—Ä—Ç–æ–π", "card")
            .text("–°–ë–ü/MirPay", "sbp"),
        }),
    }
  );
  const { link, invoiceId } = await conversation.external(() =>
    createPaymentLink(product, ctx.chat!.id.toString())
  );
  if (paymentMethod.update.callback_query?.data === "card") {
    const message = await ctx.reply(
      `<b>–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –æ–ø–ª–∞—Ç–µ. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${invoiceId}</b>`,
      {
        reply_markup: new InlineKeyboard().webApp("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", link).row(),
      }
    );
  } else {
    const message = await ctx.reply(
      `<b>–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –æ–ø–ª–∞—Ç–µ. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${invoiceId}</b>`,
      {
        reply_markup: new InlineKeyboard().url("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", link).row(),
      }
    );
  }
  await ctx.reply(
    `<b>–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –æ–ø–ª–∞—Ç–µ.</b>
    –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ù–∞ –Ω–∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
      `,
    {
      reply_markup: new InlineKeyboard().webApp("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", link),
    }
  );
  ctx = await conversation.waitFor("callback_query:data");
  if (ctx.update.callback_query?.data === "paid") {
    const payment = await conversation.external(() =>
      PaymentModel.findOne({
        where: { invoiceId },
      })
    );
    if (payment?.dataValues?.status !== "paid") {
      await ctx.reply("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
      return "fail";
    }
    conversation.session.individual.individualStep = 2;
    conversation.session.individual.answers = [];
    await ctx.reply("<b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</b>", {
      reply_markup: cancel,
    });
    await conversation.external(async () => {
      user!.boughtProducts = user?.boughtProducts?.concat(
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ"
      );
      await user!.save();
    });
    return "success";
  }
  conversation.session.consultationStep = 1;
  return "fail";
}

/* eslint-disable no-else-return */
/* eslint-disable import/no-cycle */
/* eslint-disable no-shadow */
/* eslint-disable no-await-in-loop */
import { type Conversation, createConversation } from "@grammyjs/conversations";
import { InlineKeyboard } from "grammy";
import { Context } from "#root/bot/context.js";
import { yesNo, next, canceldiagnostic } from "../../keyboards/index.js";
import { cancel } from "../../keyboards/cancel.keyboard.js";
import { diagnosticConversationChild } from "./diagnostic-child.conversation.js";

export const DIAGNOSTIC_DEFICIT_CONVERSATION_CHILD = "diagnosticDeficitChild";
export const DIAGNOSTIC_THYROID_CONVERSATION_CHILD = "diagnosticThyroidChild";
export const DIAGNOSTIC_INSULIN_CONVERSATION_CHILD = "diagnosticInsulinChild";
export const DIAGNOSTIC_ZHKT_CONVERSATION_CHILD = "diagnosticZhktChild";

interface Question {
  question: string;
  answer: string;
  keyboard?: typeof InlineKeyboard;
}
const questionsZhkt: Question[] = [
  {
    question: "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å",
    answer: "–û—Ç–≤–µ—Ç",
  },
];
const questionsDeficit: Question[] = [
  {
    question: "–ï—Å—Ç—å –ª–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –∑—É–±–æ–≤ –Ω–∞ —â–µ–∫–∞—Ö —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã?",
    answer: `–≠—Ç–æ —Ä–∏—Å–∫–∏ –≥–∏–ø–æ—Ç–∏—Ä–µ–æ–∑–∞`,
  },
  {
    question: "–ï—Å—Ç—å –ª–∏ –ª—É–Ω–∫–∏ –Ω–∞ –Ω–æ–≥—Ç—è—Ö?",
    answer: `–ï—Å—Ç—å —Ä–∏—Å–∫–∏ –≥–∏–ø–æ–∫—Å–∏–∏`,
  },
  {
    question: "–ï—Å—Ç—å –ª–∏ –±–µ–ª—ã–µ –ø—è—Ç–Ω–∞ –Ω–∞ –Ω–æ–≥—Ç–µ–≤–æ–π –ø–ª–∞—Å—Ç–∏–Ω–µ?",
    answer: `–≠—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ —Ü–∏–Ω–∫–∞`,
  },
  {
    question: "–£ —Ä–µ–±—ë–Ω–∫–∞ —Ä–∏—Ñ–ª–µ–Ω—ã–µ –Ω–æ–≥—Ç–∏?",
    answer: `–ê —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∞–Ω–µ–º–∏–∏`,
  },
  {
    question: "–ï—Å—Ç—å –ª–∏ –∑–∞—É—Å–µ–Ω—Ü—ã ?",
    answer: `–ü—Ä–∏–∑–Ω–∞–∫ —è–≤–Ω–æ–≥–æ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –±–µ–ª–∫–∞`,
  },
  {
    question: "–°–∏–ª—å–Ω–∞—è —Ç—è–≥–∞ –∫ —Å–ª–∞–¥–∫–æ–º—É?",
    answer: `–†–∏—Å–∫–∏ –∞–Ω–µ–º–∏–∏ –∏ –≥–∏–ø–æ–∫—Å–∏–∏`,
  },
  {
    question: "–ü–æ—Ç–ª–∏–≤–æ—Å—Ç—å –Ω–æ—á—å—é, –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ–ª–æ–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å —à–µ–∏ –∏ –ø–ª–µ—á–∏",
    answer: `–î–µ—Ñ–∏—Ü–∏—Ç –≤–∏—Ç–∞–º–∏–Ω–∞ D –∏ –≤–∏—Ä—É—Å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞`,
  },
  {
    question: "–í—ã–ø–∞–¥–∞—é—Ç –≤–æ–ª–æ—Å—ã, —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å—É—Ö–∏–º–∏ –∏ —Ç–æ–Ω–∫–∏–º–∏?",
    answer: `–î–µ—Ñ–∏—Ü–∏—Ç –±–µ–ª–∫–∞ –∏ –≥–∏–ø–æ—Ç–∏—Ä–µ–æ–∑`,
  },
  {
    question: "–ö–æ–∂–∞ —Å—Ç–∞–ª–∞ —Å—É—Ö–æ–π, ¬´–≥—É—Å–∏–Ω–∞—è –∫–æ–∂–∞¬ª, —Å—É—Ö–∏–µ –ª–æ–∫—Ç–∏ –∏ –ø—è—Ç–∫–∏?",
    answer: `–î–µ—Ñ–∏—Ü–∏—Ç –∂–∏—Ä–æ—Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã—Ö –≤–∏—Ç–∞–º–∏–Ω`,
  },
  {
    question: "–ì–æ–ª—É–±–æ–≤–∞—Ç—ã–µ —Å–∫–ª–µ—Ä—ã –≥–ª–∞–∑",
    answer: `–≠—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –∞–Ω–µ–º–∏–∏`,
  },
];
const questionsThyroid: Question[] = [
  {
    question: "–ï—Å–ª–∏ ‚Äú—Å—ã–ø—è—Ç—Å—è‚Äù –≤–æ–ª–æ—Å—ã?",
    answer: `–û–±–∏–ª—å–Ω–æ–µ –≤—ã–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ª–æ—Å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–æ—Ä–º–æ–Ω–∞–º–∏ —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã, –¥–µ—Ñ–∏—Ü–∏—Ç –±–µ–ª–∫–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–æ–π —Å —Ñ–µ—Ä–º–µ–Ω—Ç–æ–º 5-–∞–ª—å—Ñ–∞-—Ä–µ–¥—É–∫—Ç–∞–∑–∞.`,
  },
  {
    question: "–£ –≤–∞—Å —Ä–µ–¥–∫–æ–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ?",
    answer: `–ù–µ –ø–æ–≤–æ–¥ –¥–ª—è –≥–æ—Ä–¥–æ—Å—Ç–∏. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —É –≤–∞—Å –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ –ø–æ—á–µ–∫ - –æ–Ω–∏ –Ω–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—é.`,
  },
  {
    question: "–°—Ç—Ä–∞–¥–∞–µ—Ç–µ –æ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –ø–æ—Ç–ª–∏–≤–æ—Å—Ç–∏?",
    answer: `–í–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å, —Ç–∞–∫–∂–µ –æ—Ä–≥–∞–Ω—ã –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏–∏ (–ø–µ—á–µ–Ω—å, –ø–æ—á–∫–∏, –∫–∏—à–µ—á–Ω–∏–∫, –∫–æ–∂–∞ –∏ –¥—Ä.) –Ω–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏–∏.`,
  },
  {
    question: "–ù–∞ —è–∑—ã–∫–µ —á–∞—Å—Ç–æ –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –∑—É–±–æ–≤?",
    answer: `–ü–æ—Ä–∞ –ø–æ—Å–µ—Ç–∏—Ç—å —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∞ -  —â–∏—Ç–æ–≤–∏–¥–Ω–∞—è –∂–µ–ª–µ–∑–∞ —Å–æ–æ–±—â–∞–µ—Ç —Ç–∞–∫ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –≤ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ.`,
  },
  {
    question: "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∑–∞—á–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è?",
    answer: `–í–∞–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, —â–∏—Ç–æ–≤–∏–¥–Ω—É—é –∂–µ–ª–µ–∑—É, –¥–µ—Ñ–∏—Ü–∏—Ç—ã –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –∏ –≤–∏—Ç–∞–º–∏–Ω–æ–≤.`,
  },
  {
    question: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Å–ª–∞–±–æ—Å—Ç—å?",
    answer: `–¢–∞–∫ –º–æ–≥—É—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –∞–Ω–µ–º–∏—è –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã.`,
  },
  {
    question: "–ù–∞ —Å–ø–∏–Ω–µ –∏ –ª–∏—Ü–µ —á–∞—Å—Ç–æ –æ–±—Ä–∞–∑—É—é—Ç—Å—è —É–≥—Ä–∏, –∞ –≤—ã —É–∂–µ –Ω–µ –ø–æ–¥—Ä–æ—Å—Ç–æ–∫?",
    answer: `–í–æ-–ø–µ—Ä–≤—ã—Ö, –Ω–∞—Ä—É—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏–∏. –í–æ-–≤—Ç–æ—Ä—ã—Ö, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–∏—â–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–ª—é—Ç–µ–Ω–∞.`,
  },
  {
    question:
      "–ß–∞—Å—Ç–æ –æ—Ç–µ–∫–∞—é—Ç –Ω–æ–≥–∏, –∞ —Å–ª–µ–¥—ã –æ—Ç —Ä–µ–∑–∏–Ω–æ–∫ –Ω–æ—Å–∫–æ–≤ –¥–µ—Ä–∂–∞—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤?",
    answer: `–≠—Ç–æ –ø—Ä—è–º–æ–π —Å–∏–≥–Ω–∞–ª –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑–æ–π.`,
  },
  {
    question: "–í—ã –ø—Ä–∏–≤—ã–∫–ª–∏ –∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –±–æ–ª—è–º –≤–æ –≤—Ä–µ–º—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏?",
    answer: `–ù–µ—Ç, —ç—Ç–æ –Ω–µ –Ω–æ—Ä–º–∞. –ü–æ—Ä–∞ –∑–∞–Ω—è—Ç—å—Å—è –∑–¥–æ—Ä–æ–≤—å–µ–º –∂–µ–ª—á–Ω–æ–≥–æ –ø—É–∑—ã—Ä—è. –°–¥–∞—Ç—å –∫—Ä–æ–≤—å, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∞–Ω–µ–º–∏—é –∏ –¥–µ—Ñ–∏—Ü–∏—Ç—ã. –£–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ–ª–µ —Ä–∞–±–æ—Ç–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ`,
  },
  {
    question: "–ó–∞–º–µ—Ç–∏–ª–∏ –∑–∞ —Å–æ–±–æ–π —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π?",
    answer: `–¢–∞–∫–æ–≤ –ø–µ—á–∞–ª—å–Ω—ã–π —Å–∏–º–ø—Ç–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π - –ø—Ä–æ–±–ª–µ–º —Å —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑–æ–π, –∫–∞–Ω–¥–∏–¥–æ–∑–∞, –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –∏ –∏–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.`,
  },
  {
    question: "–ü–æ–Ω—è–ª–∏, —á—Ç–æ —Å–µ–∫—Å–∞ —Ö–æ—á–µ—Ç—Å—è –º–µ–Ω—å—à–µ (–∏ –¥–µ–ª–æ –Ω–µ –≤ –ø–∞—Ä—Ç–Ω–µ—Ä–µ)?",
    answer: `–¢–∞–∫ —Ç–µ–ª–æ —Å–æ–æ–±—â–∞–µ—Ç –æ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å–µ. –°–Ω–∏–∂–µ–Ω–Ω–æ–µ –ª–∏–±–∏–¥–æ —Ç–∞–∫–∂–µ –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–∞–ª–∏—á–∏–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤.`,
  },
  {
    question: "–ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ —Ö–æ–ª–æ–¥?",
    answer: `–°–∏–≥–Ω–∞–ª –æ –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã.`,
  },
  {
    question: "–ò—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫?",
    answer: `–°–æ–Ω–ª–∏–≤–æ—Å—Ç—å –º–æ–∂–µ—Ç —è–≤–ª—è—Ç—å—Å—è –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ–º –∞–Ω–µ–º–∏–∏, –ø—Ä–æ–±–ª–µ–º —Å —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑–æ–π –∏ –Ω–∞–¥–ø–æ—á–µ—á–Ω–∏–∫–∞–º–∏. –¢–∞–∫–∂–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤.`,
  },
  {
    question: "–í—Å–µ–≥–¥–∞ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å —Å—Ä–µ–¥–∏ –Ω–æ—á–∏, —á—Ç–æ–±—ã —Å—Ö–æ–¥–∏—Ç—å –≤ —Ç—É–∞–ª–µ—Ç?",
    answer: `–¢–∞–∫ –ø—Ä–æ—è–≤–ª—è—é—Ç —Å–µ–±—è –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–¥–ø–æ—á–µ—á–Ω–∏–∫–∞–º–∏.`,
  },
  {
    question: "–ù–µ –≤—ã—Å—ã–ø–∞–µ—Ç–µ—Å—å, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–æ–ª–≥–æ —Å–ø–∏—Ç–µ!",
    answer: `–í–∞–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ —Å–±–æ–µ –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥–ø–æ—á–µ—á–Ω–∏–∫–æ–≤!`,
  },
  {
    question: "–í—ã –ø—å–µ—Ç–µ –±–æ–ª–µ–µ 2 —á–∞—à–µ–∫ –∫–æ—Ñ–µ –≤ –¥–µ–Ω—å?",
    answer: `–ü—Ä–∏—Å–º–æ—Ç—Ä–∏—Ç–µ—Å—å, –º–æ–∂–µ—Ç –±—ã—Ç—å, —É  –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏—è –∏ —Å–∏–º–ø—Ç–æ–º—ã –ø—Ä–æ–±–ª–µ–º —Å –Ω–∞–¥–ø–æ—á–µ—á–Ω–∏–∫–∞–º–∏?`,
  },
  {
    question: "–í—ã –µ–¥–∏—Ç–µ –±–æ–ª–µ–µ 4 —Ä–∞–∑ –≤ –¥–µ–Ω—å, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–∫—É—Å—ã?",
    answer: `–ß–∞—Å—Ç–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–±–æ—è–º –≤ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, –Ω–∞—Ä—É—à–µ–Ω–∏—è–º —É–≥–ª–µ–≤–æ–¥–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ (–ü—Ä–∏–≤–µ—Ç, –∏–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å!), –∞ —Ç–∞–∫–∂–µ –¥–∏—Å–±–∏–æ–∑—É –∫–∏—à–µ—á–Ω–∏–∫–∞!`,
  },
];
const questionsInsulin: Question[] = [
  {
    question: "–ë—ã–≤–∞–µ—Ç –ª–∏¬†–Ω–µ—Ä–≤–Ω–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ–¥–∞",
    answer: `–ï—Å—Ç—å —Ä–∏—Å–∫–∏ –≥–∏–ø–æ–≥–ª–∏–∫–µ–º–∏–∏`,
  },
  {
    question: "–°–∏–ª—å–Ω–∞—è —Ç—è–≥–∞ –∫ —Å–ª–∞–¥–∫–æ–º—É?",
    answer: `–ï—Å—Ç—å —Ä–∏—Å–∫–∏ –≥–∏–ø–æ–≥–ª–∏–∫–µ–º–∏–∏`,
  },
  {
    question:
      "–ü—Ä–∏—Å–º–æ—Ç—Ä–∏—Ç–µ—Å—å, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–±–µ–Ω–∫–∞ –ø–æ—Ç–µ–º–Ω–µ–Ω–∏—è –≤ –ø–æ–¥–º—ã—à–µ—á–Ω—ã—Ö –≤–ø–∞–¥–∏–Ω–∞—Ö, –Ω–∞ –ª–æ–∫—Ç—è—Ö –∏ –Ω–∞ —à–µ–µ?",
    answer: `–ï—Å—Ç—å —Ä–∏—Å–∫–∏ –∏–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏`,
  },
];
export async function diagnosticZhktConversationChild(
  conversation: Conversation<Context>,
  ctx: Context
) {
  let answer;
  await ctx.reply("<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ñ–ö–¢</b>", {
    reply_markup: canceldiagnostic,
  });
  // eslint-disable-next-line unicorn/no-for-loop, no-plusplus
  for (let index = 0; index < questionsZhkt.length; index++) {
    await ctx.reply(questionsZhkt[index].question, {
      reply_markup: yesNo,
    });
    answer = await conversation.waitForCallbackQuery(["–î–∞", "–ù–µ—Ç"], {
      otherwise: async (ctx) => {
        if (ctx.message?.text === "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞") {
          return diagnosticZhktConversationChild(conversation, ctx);
        } else if (ctx.message?.text === "üìí –î—Ä—É–≥–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
          // eslint-disable-next-line no-use-before-define
          return diagnosticConversationChild(conversation, ctx);
        } else
          await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", {
            reply_markup: yesNo,
          });
      },
    });
    if (answer.match === "–î–∞") {
      await ctx.reply(questionsZhkt[index].answer, { reply_markup: next });
      const nextAnswer = await conversation.waitForCallbackQuery("next", {
        otherwise: async (ctx) => {
          if (ctx.message?.text === "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞") {
            return diagnosticZhktConversationChild(conversation, ctx);
          } else if (ctx.message?.text === "üìí –î—Ä—É–≥–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
            // eslint-disable-next-line no-use-before-define
            return diagnosticConversationChild(conversation, ctx);
          }
          // eslint-disable-next-line no-return-await
          else
            await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", {
              reply_markup: next,
            });
        },
      });
      if (nextAnswer.match === "next") {
        // eslint-disable-next-line no-continue
        continue;
      }
    }
    if (answer.match === "–ù–µ—Ç") {
      // eslint-disable-next-line no-continue
      continue;
    }
  }
  return ctx.reply(
    `–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
–ï—Å—Ç—å —Ä–∏—Å–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —É—Å—É–≥—É–±–ª–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ñ–ö–¢. –ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å–µ–±–µ –∏ —Å–≤–æ–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ñ–ö–¢, –∑–∞–±–∏—Ä–∞–π—Ç–µ –º–æ–π –≥–∞–π–¥ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ –≤–Ω–µ–¥—Ä—è–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å.`,
    {
      reply_markup: InlineKeyboard.from([
        [{ text: "–ó–∞–±—Ä–∞—Ç—å –≥–∞–π–¥", callback_data: "guide" }],
      ]),
    }
  );
  const guideAnswer = await conversation.waitForCallbackQuery("guide");

  if (guideAnswer.match === "guide") {
    return ctx.reply("–ì–∞–π–¥", {
      reply_markup: cancel,
    });
  }
}
export async function diagnosticDeficitConversationChild(
  conversation: Conversation<Context>,
  ctx: Context
) {
  let answer;
  await ctx.reply("<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –î–µ—Ñ–∏—Ü–∏—Ç–æ–≤</b>", {
    reply_markup: canceldiagnostic,
  });
  // eslint-disable-next-line unicorn/no-for-loop, no-plusplus
  for (let index = 0; index < questionsDeficit.length; index++) {
    await ctx.reply(questionsDeficit[index].question, {
      reply_markup: yesNo,
    });
    answer = await conversation.waitForCallbackQuery(["–î–∞", "–ù–µ—Ç"], {
      otherwise: async (ctx) => {
        if (ctx.message?.text === "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞") {
          return diagnosticDeficitConversationChild(conversation, ctx);
        } else if (ctx.message?.text === "üìí –î—Ä—É–≥–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
          // eslint-disable-next-line no-use-before-define
          return diagnosticConversationChild(conversation, ctx);
        } else
          await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", {
            reply_markup: yesNo,
          });
      },
    });
    if (answer.match === "–î–∞") {
      await ctx.reply(questionsThyroid[index].answer, { reply_markup: next });
      const nextAnswer = await conversation.waitForCallbackQuery("next", {
        otherwise: async (ctx) => {
          if (ctx.message?.text === "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞") {
            return diagnosticDeficitConversationChild(conversation, ctx);
          } else if (ctx.message?.text === "üìí –î—Ä—É–≥–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
            // eslint-disable-next-line no-use-before-define
            return diagnosticConversationChild(conversation, ctx);
          }
          // eslint-disable-next-line no-return-await
          else
            await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", {
              reply_markup: next,
            });
        },
      });
      if (nextAnswer.match === "next") {
        // eslint-disable-next-line no-continue
        continue;
      }
    }
    if (answer.match === "–ù–µ—Ç") {
      // eslint-disable-next-line no-continue
      continue;
    }
  }
  return ctx.reply(
    `–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
–ï—Å—Ç—å —Ä–∏—Å–∫–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ —É—Å—É–≥—É–±–ª–µ–Ω–∏—è –±–æ–ª–µ–∑–Ω–µ–π –Ω–∞ —Ñ–æ–Ω–µ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø –≤–∏—Ç–∞–º–∏–Ω. –ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å–µ–±–µ –∏ —Å–≤–æ–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–∞–º–∏, –∑–∞–±–∏—Ä–∞–π—Ç–µ –º–æ–π –≥–∞–π–¥ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ –≤–Ω–µ–¥—Ä—è–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å.`,
    {
      reply_markup: InlineKeyboard.from([
        [{ text: "–ó–∞–±—Ä–∞—Ç—å –≥–∞–π–¥", callback_data: "guide" }],
      ]),
    }
  );
  const guideAnswer = await conversation.waitForCallbackQuery("guide");

  if (guideAnswer.match === "guide") {
    return ctx.reply("–ì–∞–π–¥", {
      reply_markup: cancel,
    });
  }
}
export async function diagnosticThyroidConversationChild(
  conversation: Conversation<Context>,
  ctx: Context
) {
  let answer;
  await ctx.reply("<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –©–∏—Ç–æ–≤–∏–¥–∫–∏ –∏ –≥–æ—Ä–º–æ–Ω–æ–≤</b>", {
    reply_markup: canceldiagnostic,
  });
  // eslint-disable-next-line unicorn/no-for-loop, no-plusplus
  for (let index = 0; index < questionsThyroid.length; index++) {
    await ctx.reply(questionsThyroid[index].question, {
      reply_markup: yesNo,
    });
    answer = await conversation.waitForCallbackQuery(["–î–∞", "–ù–µ—Ç"], {
      otherwise: async (ctx) => {
        if (ctx.message?.text === "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞") {
          return diagnosticThyroidConversationChild(conversation, ctx);
        } else if (ctx.message?.text === "üìí –î—Ä—É–≥–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
          // eslint-disable-next-line no-use-before-define
          return diagnosticConversationChild(conversation, ctx);
        } else
          await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", {
            reply_markup: yesNo,
          });
      },
    });
    if (answer.match === "–î–∞") {
      await ctx.reply(questionsThyroid[index].answer, { reply_markup: next });
      const nextAnswer = await conversation.waitForCallbackQuery("next", {
        otherwise: async (ctx) => {
          if (ctx.message?.text === "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞") {
            return diagnosticThyroidConversationChild(conversation, ctx);
          } else if (ctx.message?.text === "üìí –î—Ä—É–≥–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
            // eslint-disable-next-line no-use-before-define
            return diagnosticConversationChild(conversation, ctx);
          }
          // eslint-disable-next-line no-return-await
          else
            await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", {
              reply_markup: next,
            });
        },
      });
      if (nextAnswer.match === "next") {
        // eslint-disable-next-line no-continue
        continue;
      }
    }
    if (answer.match === "–ù–µ—Ç") {
      // eslint-disable-next-line no-continue
      continue;
    }
  }
  return ctx.reply(
    `–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
–ï—Å—Ç—å —Ä–∏—Å–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —É—Å—É–≥—É–±–ª–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≥–æ—Ä–º–æ–Ω–∞–º–∏ –∏ —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑–æ–π. –ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å–µ–±–µ –∏ —Å–≤–æ–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É —Ä–µ—à–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞–±–∏—Ä–∞–π—Ç–µ –º–æ–π –≥–∞–π–¥ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ –≤–Ω–µ–¥—Ä—è–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å.`,
    {
      reply_markup: InlineKeyboard.from([
        [{ text: "–ó–∞–±—Ä–∞—Ç—å –≥–∞–π–¥", callback_data: "guide" }],
      ]),
    }
  );
  const guideAnswer = await conversation.waitForCallbackQuery("guide");

  if (guideAnswer.match === "guide") {
    return ctx.reply("–ì–∞–π–¥", {
      reply_markup: cancel,
    });
  }
}
export async function diagnosticInsulinConversationChild(
  conversation: Conversation<Context>,
  ctx: Context
) {
  let answer;
  await ctx.reply("<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ò–Ω—Å—É–ª–∏–Ω–∞</b>", {
    reply_markup: canceldiagnostic,
  });
  // eslint-disable-next-line unicorn/no-for-loop, no-plusplus
  for (let index = 0; index < questionsInsulin.length; index++) {
    await ctx.reply(questionsInsulin[index].question, {
      reply_markup: yesNo,
    });
    answer = await conversation.waitForCallbackQuery(["–î–∞", "–ù–µ—Ç"], {
      otherwise: async (ctx) => {
        if (ctx.message?.text === "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞") {
          return diagnosticInsulinConversationChild(conversation, ctx);
        } else if (ctx.message?.text === "üìí –î—Ä—É–≥–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
          // eslint-disable-next-line no-use-before-define
          return diagnosticConversationChild(conversation, ctx);
        } else
          await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", {
            reply_markup: yesNo,
          });
      },
    });
    if (answer.match === "–î–∞") {
      await ctx.reply(questionsInsulin[index].answer, { reply_markup: next });
      const nextAnswer = await conversation.waitForCallbackQuery("next", {
        otherwise: async (ctx) => {
          if (ctx.message?.text === "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞") {
            return diagnosticInsulinConversationChild(conversation, ctx);
          } else if (ctx.message?.text === "üìí –î—Ä—É–≥–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
            // eslint-disable-next-line no-use-before-define
            return diagnosticConversationChild(conversation, ctx);
          }
          // eslint-disable-next-line no-return-await
          else
            await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", {
              reply_markup: next,
            });
        },
      });
      if (nextAnswer.match === "next") {
        // eslint-disable-next-line no-continue
        continue;
      }
    }
    if (answer.match === "–ù–µ—Ç") {
      // eslint-disable-next-line no-continue
      continue;
    }
  }
  return ctx.reply(
    `–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
–ï—Å—Ç—å —Ä–∏—Å–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —É—Å—É–≥—É–±–ª–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞ —Ñ–æ–Ω–µ –∏–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏. –ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å–µ–±–µ –∏ —Å–≤–æ–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É —Ä–µ—à–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É, –∑–∞–±–∏—Ä–∞–π—Ç–µ –º–æ–π –≥–∞–π–¥ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ –≤–Ω–µ–¥—Ä—è–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å.`,
    {
      reply_markup: InlineKeyboard.from([
        [{ text: "–ó–∞–±—Ä–∞—Ç—å –≥–∞–π–¥", callback_data: "guide" }],
      ]),
    }
  );
  const guideAnswer = await conversation.waitForCallbackQuery("guide");

  if (guideAnswer.match === "guide") {
    return ctx.reply("–ì–∞–π–¥", {
      reply_markup: cancel,
    });
  }
}

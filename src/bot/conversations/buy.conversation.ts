/* eslint-disable no-loop-func */
/* eslint-disable prefer-const */
/* eslint-disable no-useless-return */
/* eslint-disable no-shadow */
/* eslint-disable no-return-await */
/* eslint-disable no-param-reassign */
/* eslint-disable no-await-in-loop */
import { type Conversation } from "@grammyjs/conversations";
import { InlineKeyboard, Keyboard } from "grammy";
import { Context } from "#root/bot/context.js";
import {
  createPaymentLink,
  editUserAttribute,
  findPromoCodeByTitleAndProduct,
  updateUserPhone,
} from "#root/server/utils.js";
import { IProduct } from "#root/typing.js";
import { cancel } from "../keyboards/cancel.keyboard.js";

export const products: IProduct[] = [
  {
    id: 1,
    name: "–î–µ—Ç—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
    price: 7000,
    type: "link",
    answer:
      "<a href='https://t.me/+y34BKRWT_R0wM2I6'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>",
  },
  {
    id: 2,
    name: "–ú–µ—Ç–æ–¥–∏—á–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∂–µ–ª—á—å—é",
    price: 5000,
    type: "doc",
    docId:
      "BQACAgIAAxkBAAIKDWUC8jktsNfxpSEiNv-uL8ynPL0lAAIkMQACS5AZSK4WXfoa1B_oMAQ",
  },
  {
    id: 3,
    name: "–ì–∞–π–¥ –ê–ø—Ç–µ—á–∫–∞ –¥–ª—è –¥–µ—Ç–µ–π –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö",
    price: 5000,
    type: "doc",
    docId:
      "BQACAgIAAxkBAAIKC2UC8f8ZEsvBZSaSqspiHMhcUOlWAAIfMQACS5AZSKRoICkE24x8MAQ",
  },
  {
    id: 4,
    name: "–ì—Ä—É–ø–ø–æ–≤–æ–µ –≤–µ–¥–µ–Ω–∏–µ",
    price: 5000,
    type: "link",
    answer:
      "<a href='https://t.me/+798aDavPym8yODgy'>–ó–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç</a>",
  },
  {
    id: 5,
    name: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
    price: 10_000,
    type: "link",
    answer: "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞",
  },
];

export const userSuggestions = new InlineKeyboard()
  .url(
    "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–µ–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
    "https://telegra.ph/Politika-konfidencialnost-09-19"
  )
  .row()
  .url("–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", "https://telegra.ph/PUBLICHNAYA-OFERTA-09-19-3")
  .row()
  .text(" ‚òëÔ∏è –°–æ–≥–ª–∞—à–∞—é—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏", "accept");

export const BUY_CONVERSATION = "buy";
export async function buyConversation(
  conversation: Conversation<Context>,
  ctx: Context
) {
  const selectedProduct = conversation.session?.selectedProduct;
  let product: IProduct | undefined;
  let promoTitle: string | undefined;
  if (!selectedProduct) {
    return ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç");
  }
  product = products.find((p) => p.name === selectedProduct);
  await ctx.reply(
    `–ü—Ä–æ–¥—É–∫—Ç : <b>${product?.name}</b> \n–¶–µ–Ω–∞ : <b>${product?.price}</b> —Ä—É–±–ª–µ–π`
  );
  await ctx.reply("–û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑, –¥–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞");
  let sugMessage = await ctx.reply("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä—Ç–æ–π", {
    reply_markup: userSuggestions,
  });
  ctx = await conversation.wait();
  while (ctx.update.callback_query?.data !== "accept") {
    sugMessage = await ctx.reply("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä—Ç–æ–π", {
      reply_markup: userSuggestions,
    });
    ctx = await conversation.wait();
  }
  await ctx.api.editMessageReplyMarkup(
    sugMessage.chat.id,
    sugMessage.message_id,
    {
      reply_markup: new InlineKeyboard()
        .url(
          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
          "https://telegra.ph/Politika-konfidencialnost-09-19"
        )
        .row()
        .url(
          "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–µ–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
          "https://telegra.ph/PUBLICHNAYA-OFERTA-09-19-3"
        )
        .row()
        .text(" ‚úÖ –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω"),
    }
  );
  if (conversation.session.phoneNumber === "") {
    await ctx.reply(
      "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚¨áÔ∏è",
      {
        reply_markup: new Keyboard()
          .requestContact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
          .resized(),
      }
    );
    const contact = await conversation.waitFor(":contact");
    conversation.session.phoneNumber = contact.message!.contact.phone_number;
    await conversation.external(async () => {
      await updateUserPhone(
        ctx.chat!.id,
        contact.message!.contact.phone_number
      );
    });
  }
  await ctx.reply("–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ", {
    reply_markup: cancel,
  });
  if (conversation.session.fio === "") {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û");
    ctx = await conversation.waitFor("message:text");
    while (!ctx.message?.text?.match(/^(?:[–Å–ê-–Ø][–∞-—è—ë]+ ){2}[–Å–ê-–Ø][–∞-—è—ë]+$/)) {
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û");
      ctx = await conversation.waitFor("message:text");
    }
    conversation.session.fio = ctx.message?.text;
    await conversation.external(async () => {
      await editUserAttribute(
        ctx.chat!.id.toString(),
        "fio",
        ctx.message!.text!
      );
    });
  } else {
    await ctx.reply(
      `–í–∞—à–µ –§–ò–û: ${conversation.session.fio}
    –í–µ—Ä–Ω–æ?`,
      {
        reply_markup: new InlineKeyboard().text("–î–∞", "yes").text("–ù–µ—Ç", "no"),
      }
    );
    ctx = await conversation.wait();
    if (ctx.update.callback_query?.data === "no") {
      await ctx.answerCallbackQuery("–°–º–µ–Ω–∞ –§–ò–û");
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û");
      ctx = await conversation.waitFor("message:text");
      while (
        !ctx.message?.text?.match(/^(?:[–Å–ê-–Ø][–∞-—è—ë]+ ){2}[–Å–ê-–Ø][–∞-—è—ë]+$/)
      ) {
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
        ctx = await conversation.waitFor("message:text");
      }
      conversation.session.fio = ctx.message?.text;
      await conversation.external(async () => {
        await editUserAttribute(
          ctx.chat!.id.toString(),
          "fio",
          ctx.message!.text!
        );
      });
    } else if (ctx.update.callback_query?.data === "yes") {
      await ctx.answerCallbackQuery("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ");
    }
  }
  let promo;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥", {
    reply_markup: new InlineKeyboard().text("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"),
  });
  while (!promo) {
    ctx = await conversation.wait();
    if (ctx.update.callback_query?.data === "skip") {
      break;
    }
    if (ctx.message?.text) {
      promo = await conversation.external(async () => {
        return findPromoCodeByTitleAndProduct(
          "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
          promoTitle!,
          ctx.chat!.id.toString()
        );
      });
      if (!promo)
        await ctx.reply("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", {
          reply_markup: new InlineKeyboard().text("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"),
        });
    }
  }
  if (promo) {
    await ctx.reply("–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç");
    await ctx.reply(`–°–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${promo.discount}%
–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${product!.price! - product!.price! * (promo.discount! / 100)}`);
    product!.price =
      product!.price! - product!.price! * (promo.discount! / 100);
  }
  //! create link to perchase
  const { link, paymentId } = await conversation.external(() =>
    createPaymentLink(product!, ctx.chat!.id.toString())
  );
  const message = await ctx.reply(
    `<b>–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –æ–ø–ª–∞—Ç–µ. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${paymentId}</b>`,
    {
      reply_markup: new InlineKeyboard().webApp("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", link).row(),
    }
  );
  //! check payment loop
  await ctx.editMessageText("<b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</b>");
  return product?.type === "doc"
    ? ctx.replyWithDocument(product.docId!, {
        reply_markup: cancel,
      })
    : ctx.reply(product!.answer!);
}

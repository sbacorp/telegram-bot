/* eslint-disable unicorn/no-null */
/* eslint-disable default-case */
/* eslint-disable unicorn/prefer-ternary */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable prefer-const */
/* eslint-disable no-loop-func */
/* eslint-disable no-continue */
/* eslint-disable no-await-in-loop */
/* eslint-disable no-param-reassign */
/* eslint-disable no-return-await */
/* eslint-disable import/no-cycle */
import { type Conversation } from "@grammyjs/conversations";
import { InlineKeyboard, Keyboard } from "grammy";
import { Context } from "#root/bot/context.js";
import {
  ConsultationAppointmentModel,
  UserModel,
} from "#root/server/models.js";
import { IConsultationObject, IConsultationModel } from "#root/typing.js";
import { editUserAttribute } from "#root/server/utils.js";
import { cancel } from "../../keyboards/cancel.keyboard.js";
import {
  briefMaleConversation,
  questions as maleQuestions,
} from "./brief-male.conv.js";
import {
  briefFemaleConversation,
  questions as femaleQuestions,
} from "./brief-female.conv.js";
import {
  briefChildConversation,
  questions as childQuestions,
} from "./brief-child.conv.js";
import { chooseDateConversation } from "./choose-date.conv.js";
import { BuyConsultationConversation } from "./buy-consult.conv.js";

export const yesNoKeyboard = new InlineKeyboard()
  .text("–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", "no")
  .row()
  .text("–£–∂–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞)", "yes");

const conditions = async (
  conversation: Conversation<Context>,
  ctx: Context
) => {
  let message = await ctx.reply(`
–§–æ—Ä–º–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ —Ä–µ–∂–∏–º–µ ¬´–º–Ω–µ —Å—Ä–æ—á–Ω–æ¬ª, –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –≤ –ª—é–±–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ. –†–∞–∑–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞—à–∏—Ö —Ä–æ–¥–Ω—ã—Ö –∏ –±–ª–∏–∑–∫–∏—Ö, –±–µ–∑ –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω–∏—Ö.

–ï—Å–ª–∏ –≤—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –æ–ø–ª–∞—Ç–∏—Ç—å –≤ —Å—Ä–µ–¥–Ω–µ–º –∞–Ω–∞–ª–∏–∑—ã –Ω–∞ 10-15 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π, –∫—É–ø–∏—Ç—å –¥–æ–±–∞–≤–æ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 25-30 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ –¥–µ–Ω—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–æ–∫, –∏–Ω–æ–≥–¥–∞ –∏—Ö —á–∏—Å–ª–æ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 15 —à—Ç—É–∫ –≤ –¥–µ–Ω—å, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ç–æ –Ω–µ –æ—Ç–Ω–∏–º–∞–π—Ç–µ –º–æ–µ –≤—Ä–µ–º—è –∏ –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏.
  `);
  await conversation.sleep(1000);
  await ctx.reply(
    `
–ï—Å–ª–∏ –≤—ã –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –¥–æ—Å–¥–∞–µ—Ç–µ, –ø–µ—Ä–µ—Å–¥–∞–µ—Ç–µ –∞–Ω–∞–ª–∏–∑—ã –∏ –¥–æ—Å—ã–ª–∞–µ—Ç–µ –∏—Ö –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã, —Ç–æ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è, —Ç.–∫. —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.

–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ö–µ–º—É —Å–µ–π—á–∞—Å, –∞ —Å–º–æ–≥–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤—Å–µ –¥–æ–±–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–µ—Å—è—Ü–µ–≤, —ç—Ç–æ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ, —Ç.–∫. –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ –Ω–µ —Å—Ç–æ—è—Ç –Ω–∞ –º–µ—Å—Ç–µ –∏ –≤—Å—ë –±—ã—Å—Ç—Ä–æ –º–µ–Ω—è–µ—Ç—Å—è.
      `
  );
  await conversation.sleep(1000);
  message = await ctx.reply(
    `
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö - 10.000‚ÇΩ
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è –¥–µ—Ç–µ–π - 5.000‚ÇΩ
`,
    {
      reply_markup: yesNoKeyboard,
    }
  );
  return message;
};

export const CONSULTATION_CONVERSATION = "consultation";
export async function consultationConversation(
  conversation: Conversation<Context>,
  ctx: Context
) {
  const chatId = ctx.chat!.id.toString();
  const user = await conversation
    .external(() =>
      UserModel.findOne({
        where: {
          chatId,
        },
      })
    )
    .then((u) => u?.dataValues);

  let consultationObject: IConsultationObject = {
    day: conversation.session.consultation.dateString.split("-")[2] || "",
    dateString: conversation.session.consultation.dateString,
    time: conversation.session.consultation.time,
    year: new Date().getFullYear(),
    month: new Date().getMonth(),
    phoneNumber: conversation.session.phoneNumber,
    fio: conversation.session.fio,
    sex: conversation.session.sex,
    answers: conversation.session.consultation.answers,
    massanger: conversation.session.consultation.messanger,
  };
  let message = await ctx.reply("–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", {
    reply_markup: cancel,
  });

  if (conversation.session.consultationStep < 1) {
    message = await ctx.reply(
      "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫–æ –º–Ω–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏",
      {
        reply_markup: yesNoKeyboard,
      }
    );
    do {
      ctx = await conversation.wait();
      if (ctx.update.callback_query?.data === "no") {
        message = await conditions(conversation, ctx);
      }
    } while (!(ctx.update.callback_query?.data === "yes"));
    await ctx.editMessageText(
      `–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é¬ª –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏.`
    );
    await ctx.api.editMessageReplyMarkup(message.chat.id, message.message_id, {
      reply_markup: new InlineKeyboard().text("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", "start"),
    });
    do {
      ctx = await conversation.wait();
      if (!(ctx.update.callback_query?.data === "start")) {
        await ctx.answerCallbackQuery("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'");
        continue;
      }
    } while (!(ctx.update.callback_query?.data === "start"));
    conversation.session.consultationStep = 1;
  }
  if (conversation.session.consultationStep < 2) {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–ª—è –∫–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.", {
      reply_markup: new InlineKeyboard()
        .text("–ú—É–∂—á–∏–Ω—ã", "male")
        .text("–ñ–µ–Ω—â–∏–Ω—ã", "female")
        .text("–†–µ–±–µ–Ω–∫–∞", "child"),
    });
    ctx = await conversation.wait();
    while (!ctx.update.callback_query?.data?.match(/^(male|female|child)$/)) {
      await ctx.answerCallbackQuery("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏");
      ctx = await conversation.wait();
    }
    switch (ctx.update.callback_query?.data) {
      case "male": {
        conversation.session.sex = "male";
        await conversation.external(
          async () => await editUserAttribute(chatId, "sex", "male")
        );
        break;
      }
      case "female": {
        conversation.session.sex = "female";
        await conversation.external(
          async () => await editUserAttribute(chatId, "sex", "female")
        );
        break;
      }
      case "child": {
        conversation.session.sex = "child";
        await conversation.external(
          async () => await editUserAttribute(chatId, "sex", "child")
        );
        break;
      }
    }
    conversation.session.consultationStep = 2;
  }

  if (conversation.session.consultationStep < 3) {
    consultationObject = await chooseDateConversation(
      conversation,
      ctx,
      consultationObject,
      message
    );
    conversation.session.consultationStep = 3;
  }
  if (
    conversation.session.consultationStep < 4 &&
    user!.consultationPaidStatus !== true
  ) {
    ctx = (await BuyConsultationConversation(
      conversation,
      ctx,
      message,
      consultationObject
    )) as Context;
  }
  if (conversation.session.sex === "") {
    conversation.session.consultationStep = 1;
    await ctx.reply("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª");
    return ctx.conversation.reenter("consultation");
  }
  if (
    conversation.session.consultationStep < 5 &&
    ((conversation.session.sex === "male" &&
      conversation.session.consultation.questionsAnswered !==
        maleQuestions.length) ||
      (conversation.session.sex === "female" &&
        conversation.session.consultation.questionsAnswered !==
          femaleQuestions.length) ||
      (conversation.session.sex === "child" &&
        conversation.session.consultation.questionsAnswered !==
          childQuestions.length))
  ) {
    await ctx.reply(`–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ—á–µ–Ω—å –≤–æ–ø—Ä–æ—Å–æ–≤. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–¥—É–º—á–∏–≤–æ –ø—Ä–æ—á—Ç–∏—Ç–µ –∏—Ö –∏ –¥–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.
–û—Ç —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–æ 00:00 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è.
–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É`);
    const buyDate = await conversation
      .external(
        async () =>
          await UserModel.findOne({
            where: {
              chatId,
            },
          })
      )
      .then((u) => u?.dataValues?.buyDate);
    console.log(buyDate);

    if (buyDate !== new Date().getDate() + new Date().getMonth().toString()) {
      await ctx.reply("–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", {
        reply_markup: new Keyboard()
          .text("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã")
          .row()
          .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
          .resized(),
      });
      ctx = await conversation.wait();
      if (ctx.message?.text === "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã") {
        conversation.session.consultationStep = 2;
        return ctx.conversation.enter("consultation");
      }
    }
    switch (conversation.session.sex) {
      case "male": {
        await briefMaleConversation(conversation, ctx);
        break;
      }
      case "female": {
        await briefFemaleConversation(conversation, ctx);

        break;
      }
      case "child": {
        await briefChildConversation(conversation, ctx);

        break;
      }
      default: {
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ!"
        );
        break;
      }
      // No default
    }
    conversation.session.consultationStep = 5;
  }
  if (conversation.session.consultationStep < 6) {
    await ctx.reply(
      `–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É. –í –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–º–∏ –¥–∞—Ç—É —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏.
 –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ?`,
      {
        reply_markup: new InlineKeyboard()
          .text("Telegram", "Telegram")
          .row()
          .text("WhatsApp", "WhatsApp")
          .row(),
      }
    );
    ctx = await conversation.waitFor("callback_query:data");
    if (ctx.update.callback_query?.data === "Telegram") {
      consultationObject.massanger = "Telegram";
    }
    if (ctx.update.callback_query?.data === "WhatsApp") {
      consultationObject.massanger = "WhatsApp";
    }
    await ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ –≤ —ç—Ç–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ");
    const messanger = await conversation.form.text();
    conversation.session.consultation.messanger = `${consultationObject.massanger} ${messanger}`;
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é...");
    ctx.chatAction = "typing";
    let answerQuestions: string;
    if (conversation.session.sex === "male") {
      answerQuestions = conversation.session.consultation.answers
        .map((answer) => {
          return `–í–æ–ø—Ä–æ—Å :${
            maleQuestions[
              conversation.session.consultation.answers.indexOf(answer)
            ].text
          }
      –û—Ç–≤–µ—Ç: ${answer}
      `;
        })
        .join("\n");
    } else if (conversation.session.sex === "female") {
      answerQuestions = conversation.session.consultation.answers
        .map((answer) => {
          return `
        
–í–æ–ø—Ä–æ—Å :${
            femaleQuestions[
              conversation.session.consultation.answers.indexOf(answer)
            ].text
          }
–û—Ç–≤–µ—Ç: ${answer}
      `;
        })
        .join("\n");
    } else {
      answerQuestions = conversation.session.consultation.answers
        .map((answer) => {
          return `
        
–í–æ–ø—Ä–æ—Å :${
            childQuestions[
              conversation.session.consultation.answers.indexOf(answer)
            ].text
          }
–û—Ç–≤–µ—Ç: ${answer}
      `;
        })
        .join("\n");
    }
    await ctx.api.sendMessage(
      "1856156198",
      `
–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:
–ò–º—è: ${conversation.session.fio}
–¢–µ–ª–µ—Ñ–æ–Ω: ${conversation.session.phoneNumber}
–î–∞—Ç–∞ : ${conversation.session.consultation.dateString}
–í—Ä–µ–º—è: ${conversation.session.consultation.time}
–ü–æ–ª: ${conversation.session.sex}
–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ü—Å–µ—Ç—å: ${consultationObject.massanger}
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ :
${answerQuestions}`
    );
    await ConsultationAppointmentModel.create({
      chatId,
      date: conversation.session.consultation.dateString,
      time: conversation.session.consultation.time,
    });
    conversation.session.consultationStep = 6;
    ctx.chatAction = null;
  }
  return ctx.reply(
    `–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!
    –û–∂–∏–¥–∞–π—Ç–µ –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${new Date(
      consultationObject.year,
      consultationObject.month,
      Number(consultationObject.dateString.split("-")[2])
    ).toLocaleDateString("ru-RU", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    })} –≤ ${consultationObject.time}`,
    {
      reply_markup: new Keyboard().text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é").resized(),
    }
  );
}

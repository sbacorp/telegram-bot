/* eslint-disable no-console */
/* eslint-disable unicorn/consistent-function-scoping */
import { autoChatAction } from "@grammyjs/auto-chat-action";
import { hydrate } from "@grammyjs/hydrate";
import { sequentialize } from "@grammyjs/runner";
import { hydrateReply, parseMode } from "@grammyjs/parse-mode";
import { autoRetry } from "@grammyjs/auto-retry";
import {
  BotConfig,
  GrammyError,
  HttpError,
  InlineKeyboard,
  Keyboard,
  StorageAdapter,
  Bot as TelegramBot,
  session,
} from "grammy";
import { conversations, createConversation } from "@grammyjs/conversations";
import {
  Context,
  createContextConstructor,
  sessionDataDefaults,
} from "#root/bot/context.js";
import {
  botAdminFeature,
  unhandledFeature,
  welcomeFeature,
} from "#root/bot/features/index.js";
import { errorHandler } from "#root/bot/handlers/index.js";
import { updateLogger } from "#root/bot/middlewares/index.js";
import { config } from "#root/config.js";
import { logger } from "#root/logger.js";
import { fillConsultations } from "#root/server/fill-consultations.js";
import { SessionData } from "#root/typing.js";
import SessionService from "#root/server/session-adapter.js";
import {
  webSiteKeyboard,
  mainMenu,
  toProjectsMenu,
  projectsMenu,
  studyProjectsMenu,
  budsProjectsMenu,
  freeProjectsMenu,
  subscribeToChannel,
  subscribeToChannelRecommendations,
  subscribeToChannelVitD,
  subscribeToChannelNavigator,
  tgChannelKeyboard,
  projectChildHealth,
  projectZhkt,
  guideAptechka,
  diagnosticMenu,
  groupProject,
  consultationAboutMenu,
  consultationAbout2Menu,
  consultationConditionsMenu,
  consultationMenu,
} from "./keyboards/index.js";
import {
  DIAGNOSTIC_CONVERSATION_ADULT,
  DIAGNOSTIC_CONVERSATION_CHILD,
  diagnosticConversationAdult,
  diagnosticConversationChild,
  diagnosticZhktConversationAdult,
  diagnosticDeficitConversationAdult,
  diagnosticThyroidConversationAdult,
  diagnosticInsulinConversationAdult,
  diagnosticZhktConversationChild,
  diagnosticDeficitConversationChild,
  diagnosticInsulinConversationChild,
  DIAGNOSTIC_ZHKT_CONVERSATION_ADULT,
  DIAGNOSTIC_DEFICIT_CONVERSATION_ADULT,
  DIAGNOSTIC_THYROID_CONVERSATION_ADULT,
  DIAGNOSTIC_INSULIN_CONVERSATION_ADULT,
  DIAGNOSTIC_DEFICIT_CONVERSATION_CHILD,
  DIAGNOSTIC_INSULIN_CONVERSATION_CHILD,
  DIAGNOSTIC_ZHKT_CONVERSATION_CHILD,
  consultationConversation,
  CONSULTATION_CONVERSATION,
  setPromoConversation,
  createlinkConversation,
  deletePromoConversation,
  activateSubscriptionConversation,
  deleteLinkConversation,
  diagnosticAmmiakConversationChild,
  DIAGNOSTIC_AMMIAK_CONVERSATION_CHILD,
  newsletterConversation,
  diagnosticParazitConversationChild,
  DIAGNOSTIC_PARAZIT_CONVERSATION_CHILD,
  individualConversation,
} from "./conversations/index.js";
import { cancel } from "./keyboards/cancel.keyboard.js";
import {
  BUY_CONVERSATION,
  buyConversation,
} from "./conversations/buy.conversation.js";
// eslint-disable-next-line import/order
import { UserModel } from "#root/server/models.js";
import { changeSheduleConversation } from "./conversations/admin/change-shedule.conversation.js";
import {
  individualConditionsMenu,
  individualMenu,
  individualStateMenu,
} from "./keyboards/individual-menu.keyboard.js";

type Options = {
  sessionStorage?: StorageAdapter<SessionData>;
  config?: Omit<BotConfig<Context>, "ContextConstructor">;
};
export function createBot(token: string, options: Options = {}) {
  const { sessionStorage } = options;
  const bot = new TelegramBot(token, {
    ...options.config,
    ContextConstructor: createContextConstructor({ logger }),
  });
  // Middlewares
  bot.api.config.use(parseMode("HTML"));
  bot.api.config.use(
    autoRetry({
      maxRetryAttempts: 1,
      maxDelaySeconds: 5,
    })
  );
  if (config.isDev) {
    bot.use(updateLogger());
  }
  bot.use(autoChatAction(bot.api));
  bot.use(hydrateReply);
  bot.use(hydrate());
  bot.use(
    session({
      storage: SessionService,
      initial: () => ({ ...sessionDataDefaults }),
    })
  );
  const constraint = (ctx: Context) => String(ctx.chat?.id);
  //* middlemares
  bot.use(sequentialize(constraint));
  bot.command("help", async (ctx: Context) => {
    await ctx.reply("–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞?", {
      reply_markup: new InlineKeyboard()
        .url("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "https://t.me/frontsDev")
        .row()
        .url("–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", "https://t.me/osmanovpr"),
    });
  });
  //* connect plugin conversations
  bot.use(conversations());
  //* setting commands conversations
  bot.use(setPromoConversation());
  bot.use(newsletterConversation());
  bot.use(createlinkConversation());
  bot.use(deletePromoConversation());
  bot.use(deleteLinkConversation());
  bot.use(activateSubscriptionConversation());
  bot.use(changeSheduleConversation());
  //* Handlers welcome and admin
  bot.use(welcomeFeature);
  bot.use(botAdminFeature);
  //* main hears
  bot.hears("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", async (ctx: Context) => {
    await ctx.conversation.exit();
    await ctx.reply("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", {
      reply_markup: mainMenu,
    });
    return ctx.deleteMessage();
  });
  bot.filter(
    (ctx) => ctx.update.callback_query?.data === "home",
    async (ctx) => {
      await ctx.deleteMessage();
      await ctx.conversation.exit();
      return ctx.reply("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", {
        reply_markup: mainMenu,
      });
    }
  );
  //* buy conversation
  bot.use(createConversation(buyConversation, BUY_CONVERSATION));
  bot.hears("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ", async (ctx: Context) => {
    await ctx.conversation.exit();
    ctx.session.consultationStep = 1;
    await ctx.conversation.enter(CONSULTATION_CONVERSATION);
  });
  //* menus
  //* channel sub menu
  bot.use(subscribeToChannel);
  bot.use(subscribeToChannelRecommendations);
  bot.use(subscribeToChannelVitD);
  bot.use(subscribeToChannelNavigator);
  //* projects menus
  bot.use(projectChildHealth);
  bot.use(projectZhkt);
  bot.use(guideAptechka);
  bot.use(groupProject);
  bot.use(toProjectsMenu);
  toProjectsMenu.register(projectsMenu);
  bot.use(projectsMenu);
  projectsMenu.register(studyProjectsMenu);
  projectsMenu.register(freeProjectsMenu);
  projectsMenu.register(budsProjectsMenu);

  //* consultations menus
  bot.use(
    createConversation(consultationConversation, CONSULTATION_CONVERSATION)
  );
  bot.use(consultationConditionsMenu);
  bot.use(consultationAboutMenu);
  bot.use(consultationAbout2Menu);
  bot.use(consultationMenu);
  consultationConditionsMenu.register(consultationAboutMenu);
  consultationAboutMenu.register(consultationAbout2Menu);

  //* conversations diagnostics
  bot.use(
    createConversation(
      diagnosticDeficitConversationAdult,
      DIAGNOSTIC_DEFICIT_CONVERSATION_ADULT
    )
  );
  bot.use(
    createConversation(
      diagnosticThyroidConversationAdult,
      DIAGNOSTIC_THYROID_CONVERSATION_ADULT
    )
  );
  bot.use(
    createConversation(
      diagnosticInsulinConversationAdult,
      DIAGNOSTIC_INSULIN_CONVERSATION_ADULT
    )
  );
  bot.use(
    createConversation(
      diagnosticZhktConversationAdult,
      DIAGNOSTIC_ZHKT_CONVERSATION_ADULT
    )
  );
  bot.use(
    createConversation(
      diagnosticParazitConversationChild,
      DIAGNOSTIC_PARAZIT_CONVERSATION_CHILD
    )
  );
  bot.use(
    createConversation(
      diagnosticConversationAdult,
      DIAGNOSTIC_CONVERSATION_ADULT
    )
  );
  bot.use(
    createConversation(
      diagnosticDeficitConversationChild,
      DIAGNOSTIC_DEFICIT_CONVERSATION_CHILD
    )
  );
  bot.use(
    createConversation(
      diagnosticInsulinConversationChild,
      DIAGNOSTIC_INSULIN_CONVERSATION_CHILD
    )
  );
  bot.use(
    createConversation(
      diagnosticZhktConversationChild,
      DIAGNOSTIC_ZHKT_CONVERSATION_CHILD
    )
  );
  bot.use(
    createConversation(
      diagnosticAmmiakConversationChild,
      DIAGNOSTIC_AMMIAK_CONVERSATION_CHILD
    )
  );
  bot.use(
    createConversation(
      diagnosticConversationChild,
      DIAGNOSTIC_CONVERSATION_CHILD
    )
  );

  //* duagnostic menu
  bot.use(diagnosticMenu);

  //* individual
  bot.use(createConversation(individualConversation, "individual"));
  bot.use(individualStateMenu);
  bot.use(individualConditionsMenu);
  bot.use(individualMenu);
  individualStateMenu.register(individualConditionsMenu);
  //* hears handlers
  bot.hears("üåê –°–∞–π—Ç", async (ctx: Context) => {
    await ctx.deleteMessage();
    return ctx.reply("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ", {
      reply_markup: webSiteKeyboard,
    });
  });
  bot.hears("üóÉ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", async (ctx: Context) => {
    await ctx.deleteMessage();
    await ctx.reply("üóÉ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", {
      reply_markup: projectsMenu,
    });
  });
  bot.hears("üéØ –•–æ—á—É –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É", async (ctx: Context) => {
    await ctx.deleteMessage();
    await ctx.reply("üóÉ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", {
      reply_markup: projectsMenu,
    });
  });
  bot.hears("üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", async (ctx: Context) => {
    await ctx.reply("üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", {
      reply_markup: diagnosticMenu,
    });
    return ctx.deleteMessage();
  });
  bot.hears("üë©‚Äç‚öïÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", async (ctx: Context) => {
    await ctx.deleteMessage();
    return ctx.reply(
      `–í–∞–º –Ω—É–∂–µ–Ω –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –∑–¥–æ—Ä–æ–≤—å—è –∏ —ç–Ω–µ—Ä–≥–∏–∏? - –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫–æ –º–Ω–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!

–§–æ—Ä–º–∞—Ç –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
 - –ø–æ–ª–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã,
 - –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ñ–ö–¢,
 - –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –≤–∏—Ç–∞–º–∏–Ω–æ–≤,
 - –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤,
 - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞.`,
      {
        reply_markup: consultationMenu,
      }
    );
  });
  bot.hears("üë©‚Äç‚öïÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", async (ctx: Context) => {
    await ctx.deleteMessage();
    return ctx.reply(
      `–í–∞–º –Ω—É–∂–µ–Ω –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –∑–¥–æ—Ä–æ–≤—å—è –∏ —ç–Ω–µ—Ä–≥–∏–∏? - –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫–æ –º–Ω–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!

–§–æ—Ä–º–∞—Ç –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
 - –ø–æ–ª–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã,
 - –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ñ–ö–¢,
 - –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –≤–∏—Ç–∞–º–∏–Ω–æ–≤,
 - –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤,
 - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞.`,
      {
        reply_markup: consultationMenu,
      }
    );
  });
  bot.hears("üìù –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ", async (ctx: Context) => {
    await ctx.deleteMessage();
    return ctx.reply(
      `–•–æ—Ç–∏—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º —Ü–µ–ª—ã–π –º–µ—Å—è—Ü –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π?
–§–æ—Ä–º–∞—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
 - –ø–æ–ª–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã,
 - –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ñ–ö–¢,
 - –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –≤–∏—Ç–∞–º–∏–Ω–æ–≤,
 - –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤,
 - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞.`,
      {
        reply_markup: individualMenu,
      }
    );
  });
  bot.hears("ü§ñ –ö–∞—Ä–º–∞–Ω–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥", async (ctx: Context) => {
    // await ctx.reply("–ö–∞—Ä–º–∞–Ω–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥", {
    //   reply_markup: {
    //     inline_keyboard: [
    //       [
    //         {
    //           text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ ü§ñ ",
    //           url: "https://t.me/Tvoi_Nutriciolog_bot",
    //         },
    //       ],
    //     ],
    //   },
    // });
    await ctx.deleteMessage();
    return ctx.reply("‚è≥ –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω");
  });
  bot.hears("üó£ –¢–≥-–∫–∞–Ω–∞–ª", async (ctx: Context) => {
    await ctx.deleteMessage();
    await ctx.reply(
      `–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–ª–∞–¥–µ–∑—å —Ü–µ–Ω–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ, –ø–æ–≤—ã—Å–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ –¥–æ—Å—Ç–∏—á—å –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –±–∏–æ—Ö–∞–∫–∏
–ü–æ–¥–±–æ—Ä–∫–∞ –º–æ–∏—Ö –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–æ–≤:

<a href="https://t.me/alla_dietolog/709">1Ô∏è‚É£ –ì–ª–∞–≤–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –≥–æ—Ä–º–æ–Ω</a>

<a href="https://t.me/alla_dietolog/693">2Ô∏è‚É£ –ß—Ç–æ –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å –∫–∞–ª –æ –Ω–∞—à–µ–º –ñ–ö–¢</a>

<a href="https://t.me/alla_dietolog/599">3Ô∏è‚É£ –ö–∞–∫ –ø–µ—Ä–µ–∂–∏—Ç—å –∞–Ω–µ—Å—Ç–µ–∑–∏—é –∏ –Ω–∞—Ä–∫–æ–∑</a>

<a href="https://t.me/alla_dietolog/552">4Ô∏è‚É£ –†–∏—Å–∫–∏ –ø—Ä–æ–≥–µ—Å—Ç–µ—Ä–æ–Ω–æ–≤–æ–π –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏</a>

<a href="https://t.me/alla_dietolog/465">5Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º –¥–µ—Ç–æ–∫ —Å –ê—Ç–î</a>

<a href="https://t.me/alla_dietolog/384">6Ô∏è‚É£ –ü–æ—á–µ–º—É –Ω–µ–ª—å–∑—è –∂–¥–∞—Ç—å, –µ—Å–ª–∏ –≤ 2 –≥–æ–¥–∞ —É —Ä–µ–±–µ–Ω–∫–∞ –Ω–µ—Ç —Ä–µ—á–∏ </a>

<a href="https://t.me/alla_dietolog/373">7Ô∏è‚É£ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –≤ –º–µ–∂—Å–µ–∑–æ–Ω—å–µ</a>

<a href="https://t.me/alla_dietolog/381">8Ô∏è‚É£ –ü–æ—á–µ–º—É –∂–µ–ª—á—å —Ç–∞–∫ –≤–∞–∂–Ω–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ</a>

<a href="https://t.me/alla_dietolog/401">9Ô∏è‚É£ –û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ —É —Ä–µ–±–µ–Ω–∫–∞: —á—Ç–æ –¥–µ–ª–∞—Ç—å</a>

<b>–ù–∞–¥–µ—é—Å—å, –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è!</b>
    `,
      {
        reply_markup: tgChannelKeyboard,
        disable_web_page_preview: true,
      }
    );
  });
  bot.hears("üíÅüèº‚Äç‚ôÄÔ∏è –û–±–æ –º–Ω–µ", async (ctx: Context) => {
    await ctx.deleteMessage();
    await ctx.reply("üíÅüèº‚Äç‚ôÄÔ∏è –û–±–æ –º–Ω–µ", {
      reply_markup: cancel,
    });
    await ctx.reply(
      `–Ø –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥, –º–∞–≥–∏—Å—Ç—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫,  –¥–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å —Ü–µ–ª—ã–º —è—â–∏–∫–æ–º –¥–∏–ø–ª–æ–º–æ–≤, –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ø–∏–∫–µ—Ä –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö –∏ —ç–∫—Å–ø–µ—Ä—Ç —Ä–∞–¥–∏–æ –∏ —Ç–≤.

–ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: —è –∞–≤—Ç–æ—Ä –∫—É—Ä—Å–∞ ¬´–î–µ—Ç—Å–∫–∞—è –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è" –∏ ¬´–°–µ–º–µ–π–Ω–∞—è –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è¬ª - —ç—Ç–æ –î–ü–û —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.

–ú–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å - —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –ª—é–¥–µ–π –±—ã–ª–∏ –∑–¥–æ—Ä–æ–≤—ã–º–∏. –ò –ø–æ—ç—Ç–æ–º—É —è –≤—Å–µ–≥–¥–∞ –¥–∞—é –≤–∞–º —Å—Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —è –∑–∞ —Ç–æ, —á—Ç–æ–±—ã –∑–¥–æ—Ä–æ–≤—å–µ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º!`,
      {
        reply_markup: toProjectsMenu,
      }
    );
  });
  //* must be the last handler
  bot.hears("fillConsultations", async () => {
    await fillConsultations();
  });
  bot.hears("sendMessageToChannel", async () => {
    await bot.api.sendMessage("-1001833847819", "–ø—Ä–æ–≤–µ—Ä–∫–∞");
  });
  bot.on("callback_query", async (ctx: Context) => {
    const data = ctx.callbackQuery?.data;
    if (data === "child") {
      await ctx.answerCallbackQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞");
      ctx.session.sex = "child";
    }
    if (data === "male") {
      await ctx.answerCallbackQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è –º—É–∂—á–∏–Ω—ã");
      ctx.session.sex = "male";
    }
    if (data === "female") {
      await ctx.answerCallbackQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã");
      ctx.session.sex = "female";
    }
  });
  bot.on("my_chat_member", async (ctx: Context) => {
    if (ctx.update.my_chat_member?.new_chat_member?.status === "kicked") {
      const chatId = ctx.update.my_chat_member?.chat.id.toString();
      const user = await UserModel.findOne({
        where: {
          chatId,
        },
      });
      if (!user) return;
      user.status = "left";
      await user.save();
    }
  });
  bot.use(unhandledFeature);
  //* error handler
  if (config.isDev) {
    bot.catch(errorHandler);
  }
  return bot;
}

export type Bot = ReturnType<typeof createBot>;
